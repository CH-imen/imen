{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\todo-app\\\\src\\\\components\\\\TodoLists.jsx\";\n// import React, { useState } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { deleteTodo, editTodo, markTodoCompleted, clearAlltodo } from \"../redux/actions\";\n// import '../App.css'\n\n// export const TodoLists = () => {\n//   const todos = useSelector((state) => state.todoReducer.todos);\n//   const dispatch = useDispatch();\n//   const [selectedTodo, setSelectedTodo] = useState([]);\n\n//   const actionClick = (data) => {\n//     if (data && data?.type === \"edit\") {\n//       dispatch(editTodo(data?.todo?.id));\n//     } else if (data && data?.type === \"delete\") {\n//       dispatch(deleteTodo(data?.todo?.id));\n//     }\n//   };\n\n//   const changeEvent = (e, todoId) => {\n//     if (e?.target?.name !== \"select_all_todo\" && e?.target?.checked === true) {\n//       if (selectedTodo.indexOf(todoId) === -1) {\n//         setSelectedTodo((todo) => [...todo, todoId]);\n//       }\n//     } else if (e?.target?.name !== \"select_all_todo\" && e?.target?.checked === false) {\n//       const todos = selectedTodo.filter((todo) => todo !== todoId);\n//       setSelectedTodo(todos);\n//     }\n\n//     if (e?.target?.name === \"select_all_todo\" && e?.target?.checked === true) {\n//       todos && todos.forEach((todo, index) => {\n//         const allChkbox = document.getElementsByName(`todo_${index}`);\n\n//         for (let chk of allChkbox) {\n//           chk.checked = true;\n//           let todoId = todo?.id;\n\n//           setSelectedTodo((todo) => [\n//             ...todo,\n//             todoId\n//           ]);\n//         }\n//       });\n//     }\n\n//     else if (e?.target?.name === \"select_all_todo\" && e?.target?.checked === false) {\n//       todos && todos.forEach((todo, index) => {\n//         const allChkbox = document.getElementsByName(`todo_${index}`);\n//         for (let chk of allChkbox) {\n//           chk.checked = false;\n//           setSelectedTodo([]);\n//         }\n//       });\n//     }\n//   };\n\n//   const markCompleted = () => {\n//     dispatch(markTodoCompleted(selectedTodo));\n//   };\n\n//   return (\n//     <div className=\"container my-2\">\n//       <div className=\"row pb-4\" style={{height: \"60px\"}}>\n//         <div className=\"col-xl-12 text-right\">\n//           {selectedTodo.length > 0 && (\n//             <>\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() => dispatch(clearAlltodo())}\n//               >\n//                 Clear Todos\n//               </button>\n//               <button\n//                 className=\"btn btn-success ml-2\"\n//                 onClick={markCompleted}\n//               >\n//                 Mark As Completed\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n\n//       <table className=\"table table-bordered\">\n//         <thead>\n//           <tr>\n//             <th width=\"3%\">\n//               <input\n//                 type={\"checkbox\"}\n//                 onChange={(e) => changeEvent(e)}\n//                 name={\"select_all_todo\"}\n//               />\n//             </th>\n//             <th width=\"30%\">Name</th>\n//             <th width=\"42%\">Description</th>\n//             <th width=\"8%\">Status</th>\n//             <th width=\"20%\">Action</th>\n//           </tr>\n//         </thead>\n\n//         <tbody>\n//           {todos && todos.map((todo, index) => (\n//             <tr key={index}>\n//               <td>\n//                 <input\n//                   type={\"checkbox\"}\n//                   value={todo?.id}\n//                   onChange={(e) => changeEvent(e, todo?.id)}\n//                   name={`todo_${index}`}\n//                 />\n//               </td>\n//               <td>{todo?.title}</td>\n//               <td>{todo?.description}</td>\n//               <td>\n//                 {todo?.isCompleted ? (\n//                   <span className=\"badge badge-success p-2\">Done</span>\n//                 ) : todo?.isPending ? (\n//                   <span className=\"badge badge-danger p-2\">Not Done</span>\n//                 ) : (\n//                   \"\"\n//                 )}\n//               </td>\n//               <td>\n//                 <button\n//                   className=\"btn btn-primary btn-sm\"\n//                   onClick={() => actionClick({ todo: todo, type: \"edit\" })}\n//                 >\n//                   Edit\n//                 </button>\n//                 <button\n//                   className=\"btn btn-danger btn-sm ml-1\"\n//                   onClick={() => actionClick({ todo: todo, type: \"delete\" })}\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Tasky extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'container-fluid text-center',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hii from Task Container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Tasky;","map":{"version":3,"names":["React","Component","Tasky","constructor","state","render"],"sources":["C:/React/todo-app/src/components/TodoLists.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { deleteTodo, editTodo, markTodoCompleted, clearAlltodo } from \"../redux/actions\";\r\n// import '../App.css'\r\n\r\n// export const TodoLists = () => {\r\n//   const todos = useSelector((state) => state.todoReducer.todos);\r\n//   const dispatch = useDispatch();\r\n//   const [selectedTodo, setSelectedTodo] = useState([]);\r\n\r\n//   const actionClick = (data) => {\r\n//     if (data && data?.type === \"edit\") {\r\n//       dispatch(editTodo(data?.todo?.id));\r\n//     } else if (data && data?.type === \"delete\") {\r\n//       dispatch(deleteTodo(data?.todo?.id));\r\n//     }\r\n//   };\r\n\r\n//   const changeEvent = (e, todoId) => {\r\n//     if (e?.target?.name !== \"select_all_todo\" && e?.target?.checked === true) {\r\n//       if (selectedTodo.indexOf(todoId) === -1) {\r\n//         setSelectedTodo((todo) => [...todo, todoId]);\r\n//       }\r\n//     } else if (e?.target?.name !== \"select_all_todo\" && e?.target?.checked === false) {\r\n//       const todos = selectedTodo.filter((todo) => todo !== todoId);\r\n//       setSelectedTodo(todos);\r\n//     }\r\n\r\n//     if (e?.target?.name === \"select_all_todo\" && e?.target?.checked === true) {\r\n//       todos && todos.forEach((todo, index) => {\r\n//         const allChkbox = document.getElementsByName(`todo_${index}`);\r\n\r\n//         for (let chk of allChkbox) {\r\n//           chk.checked = true;\r\n//           let todoId = todo?.id;\r\n\r\n//           setSelectedTodo((todo) => [\r\n//             ...todo,\r\n//             todoId\r\n//           ]);\r\n//         }\r\n//       });\r\n//     }\r\n\r\n//     else if (e?.target?.name === \"select_all_todo\" && e?.target?.checked === false) {\r\n//       todos && todos.forEach((todo, index) => {\r\n//         const allChkbox = document.getElementsByName(`todo_${index}`);\r\n//         for (let chk of allChkbox) {\r\n//           chk.checked = false;\r\n//           setSelectedTodo([]);\r\n//         }\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const markCompleted = () => {\r\n//     dispatch(markTodoCompleted(selectedTodo));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container my-2\">\r\n//       <div className=\"row pb-4\" style={{height: \"60px\"}}>\r\n//         <div className=\"col-xl-12 text-right\">\r\n//           {selectedTodo.length > 0 && (\r\n//             <>\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() => dispatch(clearAlltodo())}\r\n//               >\r\n//                 Clear Todos\r\n//               </button>\r\n//               <button\r\n//                 className=\"btn btn-success ml-2\"\r\n//                 onClick={markCompleted}\r\n//               >\r\n//                 Mark As Completed\r\n//               </button>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <table className=\"table table-bordered\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th width=\"3%\">\r\n//               <input\r\n//                 type={\"checkbox\"}\r\n//                 onChange={(e) => changeEvent(e)}\r\n//                 name={\"select_all_todo\"}\r\n//               />\r\n//             </th>\r\n//             <th width=\"30%\">Name</th>\r\n//             <th width=\"42%\">Description</th>\r\n//             <th width=\"8%\">Status</th>\r\n//             <th width=\"20%\">Action</th>\r\n//           </tr>\r\n//         </thead>\r\n\r\n//         <tbody>\r\n//           {todos && todos.map((todo, index) => (\r\n//             <tr key={index}>\r\n//               <td>\r\n//                 <input\r\n//                   type={\"checkbox\"}\r\n//                   value={todo?.id}\r\n//                   onChange={(e) => changeEvent(e, todo?.id)}\r\n//                   name={`todo_${index}`}\r\n//                 />\r\n//               </td>\r\n//               <td>{todo?.title}</td>\r\n//               <td>{todo?.description}</td>\r\n//               <td>\r\n//                 {todo?.isCompleted ? (\r\n//                   <span className=\"badge badge-success p-2\">Done</span>\r\n//                 ) : todo?.isPending ? (\r\n//                   <span className=\"badge badge-danger p-2\">Not Done</span>\r\n//                 ) : (\r\n//                   \"\"\r\n//                 )}\r\n//               </td>\r\n//               <td>\r\n//                 <button\r\n//                   className=\"btn btn-primary btn-sm\"\r\n//                   onClick={() => actionClick({ todo: todo, type: \"edit\" })}\r\n//                 >\r\n//                   Edit\r\n//                 </button>\r\n//                 <button\r\n//                   className=\"btn btn-danger btn-sm ml-1\"\r\n//                   onClick={() => actionClick({ todo: todo, type: \"delete\" })}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nimport React, { Component } from 'react';\r\nclass Tasky extends Component {\r\n   constructor(){\r\n       super();\r\n       this.state={}}\r\n   render() {\r\n       return (\r\n           <div className={'container-fluid text-center'}>\r\n               <p>Hii from Task Container</p>\r\n           </div>\r\n       );\r\n   }\r\n}\r\nexport default (Tasky);"],"mappingszC,MAAMC,KAAK,SAASD,SAAS,CAAC;EAC3BE,WAAW,GAAE;IACT,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAC,CAAC,CAAC;EAAA;EACjBC,MAAM,GAAG;IACL,oBACI;MAAK,SAAS,EAAE,6BAA8B;MAAA,uBAC1C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAA8B;MAAA;MAAA;MAAA;IAAA,QAC5B;EAEd;AACH;AACA,eAAgBH,KAAK"},"metadata":{},"sourceType":"module"}